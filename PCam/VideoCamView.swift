import SwiftUI
import AVFoundation
import Foundation
import Introspect

struct VideoCamView: View {
    @Binding var isPhotoMode: Bool
    
    @StateObject var camera = CameraModel()
    
    
    var body: some View {
        ZStack {
            
            VStack {
                HStack {
                    Spacer()
                    BtnPhotoVideoSwitcher(isPhotoMode: $isPhotoMode)
                }
                
                TeleprompterView()
                    .background(Color(red: 0.5, green: 0.5, blue: 0.5, opacity: 0.2))
                
                Spacer()
            }
        }
    }
}

struct TeleprompterView: View {
    @ObservedObject var telepVm = TeleprompterViewModel()
    
    @State var displaySettings = false
    @State var editMode = false
    
    var body: some View {
        VStack {
            ZStack {
                VStack {
                    TeleprompterView()
                }
                
                VStack{
                    Spacer()
                    HStack{
                        Spacer()
                        
                        Button(action: { displaySettings.toggle() }) {
                            Image(systemName: "gear")
                        }
                        .padding( 5)
                    }
                }
            }
            
            if displaySettings {
                SettingsView()
                    .padding(.vertical)
                    .padding(.horizontal, 15)
            }
        }
        .frame(height: 350, alignment: .top)
        .onAppear(){
            autoScroll()
        }
    }
    
    func TeleprompterView() -> some View {
        VStack {
            if editMode {
                VStack {
                    TextEditor(text: $telepVm.text)
                    
                    HStack (spacing: 20){
                        Button(action: { editMode.toggle(); telepVm.position.y = Globals.teleprompterSafeArea } ) { Text("Close") }
                        Button(action: { telepVm.text = "" } ) { Text("Clear") }
                        //Button(action: { telepVm.text = "" } ) { Text("Paste") }
                    }
                }
            } else {
                Text(telepVm.text)
                    .font(.system(size: telepVm.textSize))
                    .frame(width: UIScreen.screenWidth - 7)
                    .foregroundColor(telepVm.color)
                    .padding(.top, Globals.teleprompterSafeArea)
                    .padding(.bottom, 500)
                    .background(Color(red: 0.1, green: 0.1, blue: 0.1, opacity: 0.1))
                    .fixedSize(horizontal: false, vertical: true)
                    .offset( x: 0, y: telepVm.position.y + telepVm.dragOffset.y )
                    .gesture(
                        DragGesture()
                            .onChanged { gesture in
                                telepVm.userDragging = true
                                telepVm.dragOffset.y = gesture.translation.height
                            }
                            .onEnded { gesture in
                                telepVm.userDragging = false
                                telepVm.position.y = telepVm.position.y + gesture.translation.height
                                
                                if telepVm.position.y > Globals.teleprompterSafeArea {
                                    telepVm.position.y = Globals.teleprompterSafeArea
                                }
                                
                                telepVm.dragOffset = .zero
                            }
                    )
                    .padding(.horizontal, 7)
            }
        }
        .frame(height: 350, alignment: .top)
        .clipShape(Rectangle())
        .background(Color(red: 0.1, green: 0.1, blue: 0.1, opacity: 0.1))
        .onTapGesture(count: 2) { editMode.toggle() }
    }
    
    func SettingsView() -> some View {
        VStack {
            VStack {
                SpeedSlider()
                
                HStack {
                    ColorPicker(selection: $telepVm.color) { EmptyView() }
                        .frame(width: 25)
                        .padding(.trailing, 5)
                    
                    TextSizeSlider()
                }
            }
        }
    }
}

extension TeleprompterView {
    func autoScroll() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            withAnimation{
                if telepVm.position.y < Globals.teleprompterSafeArea/2 && !telepVm.userDragging {
                    telepVm.position.y -= telepVm.speed
                }
            }
            
            autoScroll()
        }
    }
}

extension TeleprompterView {
    func SpeedSlider() -> some View {
        HStack {
            Text(Image(systemName: "tortoise"))
            
            BoundsSlider(min: 0.7, max: 5, value: $telepVm.speed)
            
            Text(Image(systemName: "hare"))
        }
        
    }
    
    func TextSizeSlider() -> some View {
        HStack {
            Text("a")
                .font(.system(size: 20))
            
            BoundsSlider(min: 15, max: 45, value: $telepVm.textSize)
            
            Text("A")
                .font(.system(size: 20))
        }
    }
    
}

class TeleprompterViewModel: ObservableObject {
    @Published var dragOffset: CGPoint = .zero
    @Published var position: CGPoint = CGPoint(x: 0, y: 60)
    
    @Published var textSize: CGFloat = 20
    @Published var color: Color = .yellow
    
    @Published var text: String = Globals.defaultText
    
    @Published var speed: CGFloat = 0.7
    //@Published var lastSpeed: CGFloat = 0.7
    
    @Published var userDragging: Bool = false
}

public class Globals {
    static var teleprompterSafeArea: CGFloat = 40
    
    static var defaultText =
"""
–¶–µ–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –∑ —Ç–µ—Å—Ç–æ–≤–æ—é —Ü—ñ–ª–ª—é, —â–æ –±–∏ —Ç–∏, –º—ñ–π –ª—é–±–∏–π –¥—Ä—É–∂–µ, –º—ñ–≥ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é—î –ø—Ä–æ–≥—Ä–∞–º–∞.

–¢–æ–±—ñ –∑–¥–∞—î—Ç—å—Å—è —â–æ —Ü–µ–π —Ç–µ–∫—Å—Ç –±–µ–∑—Å–µ–Ω—Å–æ–≤–Ω–∏–π, –∞–ª–µ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —Ü–µ–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π —Å–µ–Ω—Å–æ–º, –∞–¥–∂–µ —Ç–∏ –π–æ–≥–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –≤–∏—Ä—ñ—à–∏–≤ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–æ –∫—ñ–Ω—Ü—è

–ó–Ω–∞—á–∏—Ç—å –≤—ñ–Ω, —Ç–∞–∫–∏, —Ç–µ–±–µ —á–∏–º–æ—Å—å —á—ñ–ø–ª—è—î. –ù—ñ–±–∏ —Ç–æ —è–∫ —Ç—É—Ç –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–Ω—è –∑ –ø—É—Å—Ç–æ–≥–æ —É –ø–æ—Ä–æ–∂–Ω—î, –∞–ª–µ, –≤—Å–µ —Ç–∞–∫–∏, —â–æ—Å—å –≤ —Ü—å–æ–º—É —î, —á–∏ –Ω–µ —Ç–∞–∫?

–©–æ—Å—å –º–µ–Ω—ñ –ø—ñ–¥–∫–∞–∑—É—î —â–æ —Ç–æ–±—ñ –≤–∂–µ –Ω–∞–±—Ä–∏–¥–ª–æ, –∞–ª–µ –∂ —Ç–æ–±—ñ –≤—Å–µ —â–µ —Ü—ñ–∫–∞–≤–æ —á–∏—Ç–∞—Ç–∏, –∞–¥–∂–µ —Ç–∏ —á–∏—Ç–∞—î—à. –¢–∏ —Å–ø—Ä–∞–≤–¥—ñ –Ω–∞–¥—ñ—î—à—Å—è –Ω–∞ —Ç–µ —â–æ –¥–∞–ª—ñ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç—å—Å—è?

–ù–ï –ó–ú–Ü–ù–ò–¢–¨–°–Ø.

–í—Å–µ –±—É–¥–µ —Ä—ñ–≤–Ω–æ —Ç–∞–∫ –∂–µ —è–∫ –±—É–ª–æ –∑–∞–≤–∂–¥–∏ –¥–æ —Ü—å–æ–≥–æ.

–•—ñ–±–∞ —â–æ —Å–º–∞–π–ª–∏–∫–∏ –¥–æ–¥–∞–¥—É—Ç—å—Å—è. –ß–∏ –µ–º–æ–¥–∑—ñ, —á–∏ —è–∫ —Ç–∞–º –≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —É –ø–æ—Ä—ñ–¥–∂—ñ–≤. üòÑ

–ó–¥–∞–≤–∞–ª–æ—Å—è –±, —Ü–µ —Ç—É–ø–æ –±–µ–∑—Å–µ–Ω—Å–æ–≤–Ω–∞ —Ç—Ä–∞—Ç–∞ —á–∞—Å—É, –∞–ª–µ —Ç–∏ –¥–ª—è —á–æ–≥–æ—Å—å —Ü–µ –ø—Ä–æ–¥–æ–≤–∂—É—î—à —á–∏—Ç–∞—Ç–∏. –¢–∏ –ø—Ä–æ—Å—Ç–æ –ø—Å–∏—Ö. –¢–∏ –¥–æ–≤–±–∞–Ω–∏–π –ø—Å–∏—Ö. –Ü —è –¥–æ–≤–±–∞–Ω–∏–π –ø—Å–∏—Ö.

–ú–∏ –ø—ñ–¥—Ö–æ–¥–∏–º–æ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É. –ó –Ω–∞—Å –≤–∏–π—à–ª–∞ –± —á—É–¥–æ–≤–∞ –ø–∞—Ä–∞, –º–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è. –Ø –º–æ–ª–æ–≤ –±–∏ –±–µ–∑—Å–µ–Ω—Å–æ–≤–Ω—É —á—É—à, –∞ —Ç–∏ –± —ó—ó —á–∏—Ç–∞–≤ –±–∏ –∞–±–æ —Å–ª—É—Ö–∞–≤ –±–∏. –°—ñ–º–µ–π–Ω–∞ —ñ–¥–∏–ª—ñ—è.

–ù—É –æ—Ç —ñ –≤—Å–µ... –ù–∞—Å—Ç–∞–≤ —á–∞—Å –ø—Ä–æ—â–∞—Ç–∏—Å—è....

*–Ω–∞—Å–ø—ñ–≤—É—é* –û–æ–æ–±—ñ–π–º–∏ –º–µ–Ω–µ, –æ–±—ñ–π–º–∏ –º–µ–Ω–µ, –æ–±—ñ–π–º–∏....

–ß–æ–º—É —Ç–∏ –Ω–µ —Ö–æ—á–µ—à –æ–±—ñ–π–º–∞—Ç–∏—Å—è?

–Ü–∑–≤—Ä–∞—â—É–≥–∞.

–ù—É –≤—Å–µ, –ø–∞-–ø–∞.
"""
}


extension UIScreen {
   static let screenWidth = UIScreen.main.bounds.size.width
   static let screenHeight = UIScreen.main.bounds.size.height
   static let screenSize = UIScreen.main.bounds.size
}
